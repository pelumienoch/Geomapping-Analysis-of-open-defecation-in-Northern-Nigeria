`What is the highest degree or level of school you have completed?`,
`Marital status`, Occupation, toilet) %>% # keep only columns of interest
tbl_summary(by = `toilet`,                                               # stratify entire table by outcome
statistic = list( all_continuous() ~ "{mean} ({sd})",        # stats and format for continuous columns
all_categorical() ~ "{n} ({p}%)"),   # stats and format for categorical columns
digits = all_continuous() ~ 1,                              # rounding for continuous columns
type   = all_categorical() ~ "categorical",                 # force all categorical levels to display
label  = list(                                              # display labels for column names
#toilet  ~ "Lack of toilet facilities in houses",
Age ~ "Age group",
Gender    ~ "Gender",
Settlement      ~ "Settlement",
Household2  ~ "Household",
`Average Income/Month` ~ "Average Income/Month",
`What is the highest degree or level of school you have completed?` ~ "Educational level",
`Marital status` ~ "Marital status",
Occupation ~ "Occupation"),
missing_text = "Missing"                                    # how missing values should display
) %>%
add_p(
test = list(
all_categorical() ~ "chisq.test"  # Use chi-square test for all categorical variables
)
)
Tchi <- OD_TAB %>%
select(Age,Gender,Settlement,Household2,`Average Income/Month`,
`What is the highest degree or level of school you have completed?`,
`Marital status`, Occupation,toilet) %>% # keep only columns of interest
tbl_summary(by = toilet,                                               # stratify entire table by toilet
statistic = list( all_continuous() ~ "{mean} ({sd})",        # stats and format for continuous columns
all_categorical() ~ "{n} ({p}%)"),   # stats and format for categorical columns
digits = all_continuous() ~ 1,                              # rounding for continuous columns
type   = all_categorical() ~ "categorical",                 # force all categorical levels to display
label  = list(                                              # display labels for column names
#toilet  ~ "Lack of toilet facilities in houses",
Age ~ "Age group",
Gender    ~ "Gender",
Settlement      ~ "Settlement",
Household2  ~ "Household",
`Average Income/Month` ~ "Average Income/Month",
`What is the highest degree or level of school you have completed?` ~ "Educational level",
`Marital status` ~ "Marital status",
Occupation ~ "Occupation"),
missing_text = "Missing"                                    # how missing values should display
) %>%
add_p(
test = list(
all_categorical() ~ "chisq.test"  # Use chi-square test for all categorical variables
)
)
Tchi <- OD_TAB %>%
select(Age,Gender,Settlement,Household2,`Average Income/Month`,
`What is the highest degree or level of school you have completed?`,
`Marital status`, Occupation, `Lack of toilet facilities in houses`) %>% # keep only columns of interest
tbl_summary(by = `Lack of toilet facilities in houses`,                                               # stratify entire table by toilet
statistic = list( all_continuous() ~ "{mean} ({sd})",        # stats and format for continuous columns
all_categorical() ~ "{n} ({p}%)"),   # stats and format for categorical columns
digits = all_continuous() ~ 1,                              # rounding for continuous columns
type   = all_categorical() ~ "categorical",                 # force all categorical levels to display
label  = list(                                              # display labels for column names
#toilet  ~ "Lack of toilet facilities in houses",
Age ~ "Age group",
Gender    ~ "Gender",
Settlement      ~ "Settlement",
Household2  ~ "Household",
`Average Income/Month` ~ "Average Income/Month",
`What is the highest degree or level of school you have completed?` ~ "Educational level",
`Marital status` ~ "Marital status",
Occupation ~ "Occupation"),
missing_text = "Missing"                                    # how missing values should display
) %>%
add_p(
test = list(
all_categorical() ~ "chisq.test"  # Use chi-square test for all categorical variables
)
)
View(Tchi)
### Time to convert our tibble into dataframe so as to use flextable to generate a word document type table
Tchi <- as.data.frame(Tchi)
Tchi  <- flextable(Tchi) %>%
save_as_docx(Tchi, path = "Chi square table lack of toilet")
Tchi <- as.data.frame(Tchi)
Tchi2  <- flextable(Tchi) %>%
save_as_docx(Tchi2, path = "Chi square table lack of toilet")
### Time to convert our tibble into dataframe so as to use flextable to generate a word document type table
Tchi <- as.data.frame(Tchi)
Tchi  <- flextable(Tchi) %>%
save_as_docx(Tchi, path = "Chi square table lack of toilet.docx")
### To perform CHI-SQUARE table for the `Poor understanding of effect of open defecation`
PoorCHI <- OD_TAB %>%
select(Age,Gender,Settlement,Household2,`Average Income/Month`,
`What is the highest degree or level of school you have completed?`,
`Marital status`, Occupation,`Poor understanding of effect of open defecation`) %>% # keep only columns of interest
tbl_summary(by = `Poor understanding of effect of open defecation`,                                               # stratify entire table by toilet
statistic = list( #all_continuous() ~ "{mean} ({sd})",        # stats and format for continuous columns
all_categorical() ~ "{n} ({p}%)"),   # stats and format for categorical columns
#digits = all_continuous() ~ 1,                              # rounding for continuous columns
type   = all_categorical() ~ "categorical",                 # force all categorical levels to display
label  = list(                                              # display labels for column names
`Poor understanding of effect of open defecation`  ~ "Poor understanding of effect of open defecation",
Age ~ "Age group",
Gender    ~ "Gender",
Settlement      ~ "Settlement",
Household2  ~ "Household",
`Average Income/Month` ~ "Average Income/Month",
`What is the highest degree or level of school you have completed?` ~ "Educational level",
`Marital status` ~ "Marital status",
Occupation ~ "Occupation"),
missing_text = "Missing"                                    # how missing values should display
) %>%
add_p(
test = list(
all_categorical() ~ "chisq.test"  # Use chi-square test for all categorical variables
)
)
PoorCHI <- OD_TAB %>%
select(Age,Gender,Settlement,Household2,`Average Income/Month`,
`What is the highest degree or level of school you have completed?`,
`Marital status`, Occupation,`Poor understanding of effect of open defecation`) %>% # keep only columns of interest
tbl_summary(by = `Poor understanding of effect of open defecation`,                                               # stratify entire table by toilet
statistic = list( #all_continuous() ~ "{mean} ({sd})",        # stats and format for continuous columns
all_categorical() ~ "{n} ({p}%)"),   # stats and format for categorical columns
#digits = all_continuous() ~ 1,                              # rounding for continuous columns
type   = all_categorical() ~ "categorical",                 # force all categorical levels to display
label  = list(                                              # display labels for column names
#`Poor understanding of effect of open defecation`  ~ "Poor understanding of effect of open defecation",
Age ~ "Age group",
Gender    ~ "Gender",
Settlement      ~ "Settlement",
Household2  ~ "Household",
`Average Income/Month` ~ "Average Income/Month",
`What is the highest degree or level of school you have completed?` ~ "Educational level",
`Marital status` ~ "Marital status",
Occupation ~ "Occupation"),
missing_text = "Missing"                                    # how missing values should display
) %>%
add_p(
test = list(
all_categorical() ~ "chisq.test"  # Use chi-square test for all categorical variables
)
)
### To perform CHI-SQUARE table for the `Poor understanding of effect of open defecation`
PoorCHI <- OD_TAB %>%
select(Age,Gender,Settlement,Household2,`Average Income/Month`,
`What is the highest degree or level of school you have completed?`,
`Marital status`, Occupation,`Poor understanding of effect of open defecation`) %>% # keep only columns of interest
tbl_summary(by = `Poor understanding of effect of open defecation`,                                               # stratify entire table by toilet
statistic = list( #all_continuous() ~ "{mean} ({sd})",        # stats and format for continuous columns
all_categorical() ~ "{n} ({p}%)"),   # stats and format for categorical columns
#digits = all_continuous() ~ 1,                              # rounding for continuous columns
type   = all_categorical() ~ "categorical",                 # force all categorical levels to display
label  = list(                                              # display labels for column names
#`Poor understanding of effect of open defecation`  ~ "Poor understanding of effect of open defecation",
Age ~ "Age group",
Gender    ~ "Gender",
Settlement      ~ "Settlement",
Household2  ~ "Household",
`Average Income/Month` ~ "Average Income/Month",
`What is the highest degree or level of school you have completed?` ~ "Educational level",
`Marital status` ~ "Marital status",
Occupation ~ "Occupation"),
missing_text = "Missing"                                    # how missing values should display
) %>%
add_p(test = all_categorical() ~ "chisq.test")
### Time to convert our tibble into dataframe so as to use flextable to generate a word document type table
PoorCHI <- as.data.frame(PoorCHI)
PoorCHI  <- flextable(PoorCHI) %>%
save_as_docx(PoorCHI, path = "Chi square table lack of toilet.docx")
### Time to convert our tibble into dataframe so as to use flextable to generate a word document type table
PoorCHI <- as.data.frame(PoorCHI)
PoorCHI  <- flextable(PoorCHI) %>%
save_as_docx(PoorCHI, path = "Chi square poor understanding.docx")
### To perform CHI-SQUARE table for the Cultural practice`
CultureCHI <- OD_TAB %>%
select(Age,Gender,Settlement,Household2,`Average Income/Month`,
`What is the highest degree or level of school you have completed?`,
`Marital status`,`Cultural practice`) %>% # keep only columns of interest
tbl_summary(by = `Cultural practice`,                                               # stratify entire table by toilet
statistic = list( #all_continuous() ~ "{mean} ({sd})",        # stats and format for continuous columns
all_categorical() ~ "{n} ({p}%)"),   # stats and format for categorical columns
#digits = all_continuous() ~ 1,                              # rounding for continuous columns
type   = all_categorical() ~ "categorical",                 # force all categorical levels to display
label  = list(                                              # display labels for column names
#Cultural practice``  ~ "Cultural practice`",
Age ~ "Age group",
Gender    ~ "Gender",
Settlement      ~ "Settlement",
Household2  ~ "Household",
`Average Income/Month` ~ "Average Income/Month",
`What is the highest degree or level of school you have completed?` ~ "Educational level",
`Marital status` ~ "Marital status",
Occupation ~ "Occupation"),
missing_text = "Missing"                                    # how missing values should display
) %>%
add_p(test = all_categorical() ~ "chisq.test")
CultureCHI <- OD_TAB %>%
select(Age,Gender,Settlement,Household2,`Average Income/Month`,
`What is the highest degree or level of school you have completed?`,
`Marital status`,Occupation, `Cultural practice`) %>% # keep only columns of interest
tbl_summary(by = `Cultural practice`,                                               # stratify entire table by toilet
statistic = list( #all_continuous() ~ "{mean} ({sd})",        # stats and format for continuous columns
all_categorical() ~ "{n} ({p}%)"),   # stats and format for categorical columns
#digits = all_continuous() ~ 1,                              # rounding for continuous columns
type   = all_categorical() ~ "categorical",                 # force all categorical levels to display
label  = list(                                              # display labels for column names
#Cultural practice``  ~ "Cultural practice`",
Age ~ "Age group",
Gender    ~ "Gender",
Settlement      ~ "Settlement",
Household2  ~ "Household",
`Average Income/Month` ~ "Average Income/Month",
`What is the highest degree or level of school you have completed?` ~ "Educational level",
`Marital status` ~ "Marital status",
Occupation ~ "Occupation"),
missing_text = "Missing"                                    # how missing values should display
) %>%
add_p(test = all_categorical() ~ "chisq.test")
### Time to convert our tibble into dataframe so as to use flextable to generate a word document type table
CultureCHI <- as.data.frame(CultureCHI)
CultureCHI  <- flextable(CultureCHI) %>%
save_as_docx(CultureCHI, path = "Chi square Cultural practices.docx")
### Time to convert our tibble into dataframe so as to use flextable to generate a word document type table
ReligiousCHI <- as.data.frame(ReligiousCHI)
### To perform CHI-SQUARE table for the Religious practice
ReligiousCHI <- OD_TAB %>%
select(Age,Gender,Settlement,Household2,`Average Income/Month`,
`What is the highest degree or level of school you have completed?`,
`Marital status`,Occupation,`Religious practice`) %>% # keep only columns of interest
tbl_summary(by = `Religious practice`,                                               # stratify entire table by toilet
statistic = list( #all_continuous() ~ "{mean} ({sd})",        # stats and format for continuous columns
all_categorical() ~ "{n} ({p}%)"),   # stats and format for categorical columns
#digits = all_continuous() ~ 1,                              # rounding for continuous columns
type   = all_categorical() ~ "categorical",                 # force all categorical levels to display
label  = list(                                              # display labels for column names
#Cultural practice``  ~ "Cultural practice`",
Age ~ "Age group",
Gender    ~ "Gender",
Settlement      ~ "Settlement",
Household2  ~ "Household",
`Average Income/Month` ~ "Average Income/Month",
`What is the highest degree or level of school you have completed?` ~ "Educational level",
`Marital status` ~ "Marital status",
Occupation ~ "Occupation"),
missing_text = "Missing"                                    # how missing values should display
) %>%
add_p(test = all_categorical() ~ "chisq.test")
### Time to convert our tibble into dataframe so as to use flextable to generate a word document type table
ReligiousCHI <- as.data.frame(ReligiousCHI)
ReligiousCHI  <- flextable(ReligiousCHI) %>%
save_as_docx(ReligiousCHI, path = "Chi square Religious practice.docx")
NaCHI <- OD_TAB %>%
select(Age,Gender,Settlement,Household2,`Average Income/Month`,
`What is the highest degree or level of school you have completed?`,
`Marital status`,Occupation,`Nonchalant attitude`) %>% # keep only columns of interest
tbl_summary(by = `Nonchalant attitude`,                                               # stratify entire table by toilet
statistic = list( #all_continuous() ~ "{mean} ({sd})",        # stats and format for continuous columns
all_categorical() ~ "{n} ({p}%)"),   # stats and format for categorical columns
#digits = all_continuous() ~ 1,                              # rounding for continuous columns
type   = all_categorical() ~ "categorical",                 # force all categorical levels to display
label  = list(                                              # display labels for column names
#Cultural practice``  ~ "Cultural practice`",
Age ~ "Age group",
Gender    ~ "Gender",
Settlement      ~ "Settlement",
Household2  ~ "Household",
`Average Income/Month` ~ "Average Income/Month",
`What is the highest degree or level of school you have completed?` ~ "Educational level",
`Marital status` ~ "Marital status",
Occupation ~ "Occupation"),
missing_text = "Missing"                                    # how missing values should display
) %>%
add_p(test = all_categorical() ~ "chisq.test")
### Time to convert our tibble into dataframe so as to use flextable to generate a word document type table
NaCHI <- as.data.frame(NaCHI)
NaCHI  <- flextable(NaCHI) %>%
save_as_docx(NaCHI, path = "Chi square Nonchallant.docx")
pacman::p_load(
rio,          # File import
here,         # File locator
skimr,        # get overview of data
tidyverse,    # data management + ggplot2 graphics,
gtsummary,    # summary statistics and tests
forcats,
rstatix,      # statistics
corrr,        # correlation analayis for numeric variables
janitor,      # adding totals and percents to tables
flextable,     # converting tables to HTML
apyramid,     # a package dedicated to creating age pyramids
stringr,
dplyr
)
### To perform CHI-SQUARE table for the `Peer group pressure`
PGPCHI <- OD_TAB %>%
select(Age,Gender,Settlement,Household2,`Average Income/Month`,
`What is the highest degree or level of school you have completed?`,
`Marital status`,Occupation,`Peer group pressure`) %>% # keep only columns of interest
tbl_summary(by = `Peer group pressure`,                                               # stratify entire table by toilet
statistic = list( #all_continuous() ~ "{mean} ({sd})",        # stats and format for continuous columns
all_categorical() ~ "{n} ({p}%)"),   # stats and format for categorical columns
#digits = all_continuous() ~ 1,                              # rounding for continuous columns
type   = all_categorical() ~ "categorical",                 # force all categorical levels to display
label  = list(                                              # display labels for column names
#Cultural practice``  ~ "Cultural practice`",
Age ~ "Age group",
Gender    ~ "Gender",
Settlement      ~ "Settlement",
Household2  ~ "Household",
`Average Income/Month` ~ "Average Income/Month",
`What is the highest degree or level of school you have completed?` ~ "Educational level",
`Marital status` ~ "Marital status",
Occupation ~ "Occupation"),
missing_text = "Missing"                                    # how missing values should display
) %>%
add_p(test = all_categorical() ~ "chisq.test")
### Time to convert our tibble into dataframe so as to use flextable to generate a word document type table
PGPCHI <- as.data.frame(PGPCHI)
PGPCHI  <- flextable(PGPCHI) %>%
save_as_docx(PGPCHI, path = "Chi square peer group.docx")
### To perform CHI-SQUARE table for the TABOO
TABOOCHI <- OD_TAB %>%
select(Age,Gender,Settlement,Household2,`Average Income/Month`,
`What is the highest degree or level of school you have completed?`,
`Marital status`,Occupation,`Is there taboo attach to the use of toilet`) %>% # keep only columns of interest
tbl_summary(by = `Is there taboo attach to the use of toilet`,                                               # stratify entire table by toilet
statistic = list( #all_continuous() ~ "{mean} ({sd})",        # stats and format for continuous columns
all_categorical() ~ "{n} ({p}%)"),   # stats and format for categorical columns
#digits = all_continuous() ~ 1,                              # rounding for continuous columns
type   = all_categorical() ~ "categorical",                 # force all categorical levels to display
label  = list(                                              # display labels for column names
#Cultural practice``  ~ "Cultural practice`",
Age ~ "Age group",
Gender    ~ "Gender",
Settlement      ~ "Settlement",
Household2  ~ "Household",
`Average Income/Month` ~ "Average Income/Month",
`What is the highest degree or level of school you have completed?` ~ "Educational level",
`Marital status` ~ "Marital status",
Occupation ~ "Occupation"),
missing_text = "Missing"                                    # how missing values should display
) %>%
add_p(test = all_categorical() ~ "chisq.test")
### Time to convert our tibble into dataframe so as to use flextable to generate a word document type table
TABOCHI <- as.data.frame(TABOCHI)
### Time to convert our tibble into dataframe so as to use flextable to generate a word document type table
TABOOCHI <- as.data.frame(TABOOCHI)
TABOCHI  <- flextable(TABOOCHI) %>%
save_as_docx(TABOOCHI, path = "Chi square Taboo .docx")
pacman::p_load(
rio,          # File import
here,         # File locator
tidyverse,    # data management + ggplot2 graphics,
stringr,      # manipulate text strings
purrr,        # loop over objects in a tidy way
gtsummary,    # summary statistics and tests
broom,        # tidy up results from regressions
lmtest,       # likelihood-ratio tests
parameters,   # alternative to tidy up results from regressions
see          # alternative to visualise forest plots
)
OD_REG <- import(here("Dataset1.xlsx"))      # I am importing my dataset
## define variables of interest
explanatory_vars <- c("Age","Settlement","Average Income/Month",
"What is the highest degree or level of school you have completed?",
"Marital status", "Occupation")
## drop rows with missing information for variables of interest
OD_REG <- OD_REG %>%
drop_na(any_of(c(explanatory_vars)))
univ_lack <- linelist %>%
dplyr::select(explanatory_vars,`Lack of toilet facilities in houses`) %>% ## select variables of interest
tbl_uvregression(                         ## produce univariate table
method = glm,                           ## define regression want to run (generalised linear model)
y = outcome,                            ## define outcome variable
method.args = list(family = binomial),  ## define what type of glm want to run (logistic)
exponentiate = TRUE                     ## exponentiate to produce odds ratios (rather than log odds)
)
univ_lack <- OD_REG %>%
dplyr::select(explanatory_vars,`Lack of toilet facilities in houses`) %>% ## select variables of interest
tbl_uvregression(                         ## produce univariate table
method = glm,                           ## define regression want to run (generalised linear model)
y = outcome,                            ## define outcome variable
method.args = list(family = binomial),  ## define what type of glm want to run (logistic)
exponentiate = TRUE                     ## exponentiate to produce odds ratios (rather than log odds)
)
### error return ooo!!!! says i should install broom.helpers
install.packages("broom.helpers")
### error return ooo!!!! says i should install broom.helpers
install.packages("broom.helpers")
univ_lack <- OD_REG %>%
dplyr::select(explanatory_vars,`Lack of toilet facilities in houses`) %>% ## select variables of interest
tbl_uvregression(                         ## produce univariate table
method = glm,                           ## define regression want to run (generalised linear model)
y = outcome,                            ## define outcome variable
method.args = list(family = binomial),  ## define what type of glm want to run (logistic)
exponentiate = TRUE                     ## exponentiate to produce odds ratios (rather than log odds)
)
### error return ooo!!!! says i should install broom.helpers
install.packages("broom.helpers")
pacman::p_load(
rio,          # File import
here,         # File locator
tidyverse,    # data management + ggplot2 graphics,
stringr,      # manipulate text strings
purrr,        # loop over objects in a tidy way
gtsummary,    # summary statistics and tests
broom,        # tidy up results from regressions
lmtest,       # likelihood-ratio tests
parameters,   # alternative to tidy up results from regressions
see,          # alternative to visualise forest plots
broom.helpers # for tidying up regression tables
)
univ_lack <- OD_REG %>%
dplyr::select(explanatory_vars,`Lack of toilet facilities in houses`) %>% ## select variables of interest
tbl_uvregression(                         ## produce univariate table
method = glm,                           ## define regression want to run (generalised linear model)
y = outcome,                            ## define outcome variable
method.args = list(family = binomial),  ## define what type of glm want to run (logistic)
exponentiate = TRUE                     ## exponentiate to produce odds ratios (rather than log odds)
)
univ_lack <- OD_REG %>%
dplyr::select(explanatory_vars,`Lack of toilet facilities in houses`) %>% ## select variables of interest
tbl_uvregression(                         ## produce univariate table
method = glm,                           ## define regression want to run (generalised linear model)
y = `Lack of toilet facilities in houses`,                            ## define outcome variable
method.args = list(family = binomial),  ## define what type of glm want to run (logistic)
exponentiate = TRUE                     ## exponentiate to produce odds ratios (rather than log odds)
)
OD_REGG <- OD_REG %>%
mutate(across(
.cols = all_of(c("Lack of toilet facilities in houses")),  ## for each column listed and "outcome"
.fns = ~case_when(
. %in% c("yes")   ~ 1,           ## recode male, yes and death to 1
. %in% c("no") ~ 0,           ## female, no and recover to 0
TRUE                            ~ NA_real_)    ## otherwise set to missing
)
)
univ_lack <- OD_REG %>%
dplyr::select(explanatory_vars,`Lack of toilet facilities in houses`) %>% ## select variables of interest
tbl_uvregression(                         ## produce univariate table
method = glm,                           ## define regression want to run (generalised linear model)
y = `Lack of toilet facilities in houses`,                            ## define outcome variable
method.args = list(family = binomial),  ## define what type of glm want to run (logistic)
exponentiate = TRUE                     ## exponentiate to produce odds ratios (rather than log odds)
)
View(OD_REGG)
View(OD_REG)
# convert dichotomous variables to 0/1
OD_REGG <- OD_REG %>%
mutate(across(
.cols = all_of(c("Lack of toilet facilities in houses")),  ## for each column listed and "outcome"
.fns = ~case_when(
. %in% c("Yes")   ~ 1,           ## recode male, yes and death to 1
. %in% c("No") ~ 0,           ## female, no and recover to 0
TRUE                            ~ NA_real_)    ## otherwise set to missing
)
)
univ_lack <- OD_REG %>%
dplyr::select(explanatory_vars,`Lack of toilet facilities in houses`) %>% ## select variables of interest
tbl_uvregression(                         ## produce univariate table
method = glm,                           ## define regression want to run (generalised linear model)
y = `Lack of toilet facilities in houses`,                            ## define outcome variable
method.args = list(family = binomial),  ## define what type of glm want to run (logistic)
exponentiate = TRUE                     ## exponentiate to produce odds ratios (rather than log odds)
)
View(OD_REGG)
## define variables of interest
explanatory_vars <- OD_REG %>%
select(c("Age","Settlement","Average Income/Month",
"What is the highest degree or level of school you have completed?",
"Marital status", "Occupation"))
pacman::p_load(
rio,          # File import
here,         # File locator
tidyverse,    # data management + ggplot2 graphics,
stringr,      # manipulate text strings
purrr,        # loop over objects in a tidy way
gtsummary,    # summary statistics and tests
broom,        # tidy up results from regressions
lmtest,       # likelihood-ratio tests
parameters,   # alternative to tidy up results from regressions
see,          # alternative to visualise forest plots
broom.helpers # for tidying up regression tables
)
## define variables of interest
explanatory_vars <- OD_REG %>%
select(c("Age","Settlement","Average Income/Month",
"What is the highest degree or level of school you have completed?",
"Marital status", "Occupation"))
univ_lack <- OD_REG %>%
dplyr::select(explanatory_vars,`Lack of toilet facilities in houses`) %>% ## select variables of interest
tbl_uvregression(                         ## produce univariate table
method = glm,                           ## define regression want to run (generalised linear model)
y = `Lack of toilet facilities in houses`,                            ## define outcome variable
method.args = list(family = binomial),  ## define what type of glm want to run (logistic)
exponentiate = TRUE                     ## exponentiate to produce odds ratios (rather than log odds)
)
## define variables of interest
explanatory_vars <-
select(c("Age","Settlement","Average Income/Month",
"What is the highest degree or level of school you have completed?",
"Marital status", "Occupation"))
## define variables of interest
explanatory_vars <-(c("Age","Settlement","Average Income/Month",
"What is the highest degree or level of school you have completed?",
"Marital status", "Occupation"))
univ_lack <- OD_REG %>%
dplyr::select(explanatory_vars,`Lack of toilet facilities in houses`) %>% ## select variables of interest
tbl_uvregression(                         ## produce univariate table
method = glm,                           ## define regression want to run (generalised linear model)
y = `Lack of toilet facilities in houses`,                            ## define outcome variable
method.args = list(family = binomial),  ## define what type of glm want to run (logistic)
exponentiate = TRUE                     ## exponentiate to produce odds ratios (rather than log odds)
)
